#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/** 
socket.on("connection", socket => {
  console.log(`Client connected [id=${socket.id}]`);
  sequenceNumberByClient.set(user.login, socket.id);

  socket.on("disconnect", function() {
    console.log(`Client gone [id=${socket.id}]`);
    sequenceNumberByClient.delete(user.login);
  });

  socket.on("message", function(message) {
    console.log("message: " + message.content);
    var message = new Message({conversationId: message.conversationId, content: message.content, sender: message.sender, receiver: message.receiver})
    socket[sequenceNumberByClient.get(receiver)].emit("received", message);
    message.save();
  });
});
*/
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



let sequenceNumberByClient = new Map();

io.on('connection', (socket) => {
    console.log("user connected");;
    //console.log(`Client connected [id=${socket.id}]`);
    //console.log(`Name =${session.email}`);
    //sequenceNumberByClient.set(session.email, socket.id);
    socket.on("update", (data) => {
        console.log(`Client connected [id=${socket.id}]`);
        //socket.emit("update", socket.session.user);
        //console.log(`Name =${data.session.user.name}`);
        //sequenceNumberByClient.set(userEmailLogin.email, socket.id);
    });

  socket.on("disconnect", () => {
    console.log(`Client gone [id=${socket.id}]`);
    //sequenceNumberByClient.delete(session.email);
  });

  socket.on("message", function(message) {
    console.log("message: " + message.content);
    var message = new Message({conversationId: message.conversationId, content: message.content, sender: message.sender, receiver: message.receiver})
    socket[sequenceNumberByClient.get(receiver)].emit("received", message);
    message.save();
  });
  });

//var http = require('http').Server(app);
//var io = require('socket.io')(http);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

module.exports = server, io
